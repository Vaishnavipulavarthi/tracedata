strict digraph "()" {
	pid_DATA2 -> pid_DATA	 [weight=1.0];
	pid_DATA1 -> pid_DATA	 [weight=1.0];
	rst -> state	 [weight=2.0];
	rst -> rxv1	 [weight=3.0];
	rst -> rxv2	 [weight=3.0];
	rst -> pid	 [weight=2.0];
	d2 -> rx_data_st	 [weight=1.0];
	d0 -> d1	 [weight=1.0];
	d1 -> d2	 [weight=1.0];
	pid_DATA0 -> pid_DATA	 [weight=1.0];
	pid_ACK -> next_state	 [weight=4.0];
	pid_ACK -> token_le_1	 [weight=1.0];
	pid_ACK -> got_pid_ack	 [weight=1.0];
	pid_ACK -> data_valid_d	 [weight=1.0];
	pid_ACK -> seq_err	 [weight=1.0];
	next_state -> state	 [weight=1.0];
	token_valid -> crc5_err	 [weight=1.0];
	pid_PING -> pid_TOKEN	 [weight=1.0];
	crc16_clr -> crc16_sum	 [weight=2.0];
	token_le_1 -> token0	 [weight=1.0];
	pid_DATA -> next_state	 [weight=3.0];
	pid_DATA -> data_valid_d	 [weight=1.0];
	pid_DATA -> seq_err	 [weight=2.0];
	"u1.crc_out" -> crc16_out	 [weight=1.0];
	"u0.crc_out" -> crc5_out	 [weight=1.0];
	state -> next_state	 [weight=9.0];
	state -> token_le_1	 [weight=1.0];
	state -> data_done	 [weight=1.0];
	state -> got_pid_ack	 [weight=1.0];
	state -> pid_le_sm	 [weight=1.0];
	state -> data_valid_d	 [weight=2.0];
	state -> token_le_2	 [weight=1.0];
	state -> seq_err	 [weight=2.0];
	"u1.crc_in" -> "u1.crc_out"	 [weight=39.0];
	rxv1 -> rxv2	 [weight=2.0];
	rxv2 -> data_valid0	 [weight=1.0];
	rx_data -> d0	 [weight=1.0];
	rx_data -> token1	 [weight=1.0];
	rx_data -> token0	 [weight=1.0];
	rx_data -> pid	 [weight=1.0];
	rx_data -> "u1.din"	 [weight=1.0];
	token_fadr -> "u0.din"	 [weight=1.0];
	pid_TOKEN -> next_state	 [weight=4.0];
	pid_TOKEN -> token_le_1	 [weight=1.0];
	pid_TOKEN -> data_valid_d	 [weight=1.0];
	pid_TOKEN -> seq_err	 [weight=2.0];
	token_valid_str1 -> token_valid	 [weight=1.0];
	token_crc5 -> crc5_err	 [weight=1.0];
	data_done -> rxv1	 [weight=1.0];
	data_done -> rxv2	 [weight=1.0];
	data_done -> rx_data_done	 [weight=1.0];
	data_done -> crc16_err	 [weight=1.0];
	rx_err -> next_state	 [weight=14.0];
	rx_err -> token_le_1	 [weight=2.0];
	rx_err -> data_done	 [weight=1.0];
	rx_err -> got_pid_ack	 [weight=1.0];
	rx_err -> data_valid_d	 [weight=4.0];
	rx_err -> token_le_2	 [weight=1.0];
	rx_err -> seq_err	 [weight=8.0];
	got_pid_ack -> token_valid_str1	 [weight=1.0];
	pid_MDATA -> pid_DATA	 [weight=1.0];
	crc5_out -> crc5_out2	 [weight=1.0];
	token1 -> token_crc5	 [weight=1.0];
	token1 -> frame_no	 [weight=1.0];
	token1 -> token_endp	 [weight=1.0];
	token0 -> token_fadr	 [weight=1.0];
	token0 -> frame_no	 [weight=1.0];
	token0 -> token_endp	 [weight=1.0];
	data_valid0 -> rx_data_valid	 [weight=1.0];
	"u0.crc_in" -> "u0.crc_out"	 [weight=16.0];
	crc16_out -> crc16_sum	 [weight=1.0];
	rx_active -> next_state	 [weight=15.0];
	rx_active -> crc16_clr	 [weight=1.0];
	rx_active -> token_le_1	 [weight=1.0];
	rx_active -> data_done	 [weight=1.0];
	rx_active -> rx_active_r	 [weight=1.0];
	rx_active -> data_valid_d	 [weight=3.0];
	rx_active -> token_le_2	 [weight=1.0];
	rx_active -> seq_err	 [weight=5.0];
	rx_active -> pid_ld_en	 [weight=1.0];
	rx_active_r -> crc16_clr	 [weight=1.0];
	crc16_sum -> "u1.crc_in"	 [weight=1.0];
	crc16_sum -> crc16_err	 [weight=1.0];
	token_valid_r1 -> token_valid_str1	 [weight=1.0];
	pid_SETUP -> pid_TOKEN	 [weight=1.0];
	pid_le_sm -> pid_ld_en	 [weight=1.0];
	pid_SOF -> pid_TOKEN	 [weight=1.0];
	pid_OUT -> pid_TOKEN	 [weight=1.0];
	pid -> pid_DATA2	 [weight=1.0];
	pid -> pid_DATA1	 [weight=1.0];
	pid -> pid_NACK	 [weight=1.0];
	pid -> pid_DATA0	 [weight=1.0];
	pid -> pid_ACK	 [weight=1.0];
	pid -> pid_PING	 [weight=1.0];
	pid -> pid_STALL	 [weight=1.0];
	pid -> pid_SPLIT	 [weight=1.0];
	pid -> pid_MDATA	 [weight=1.0];
	pid -> pid_PRE	 [weight=1.0];
	pid -> pid_cks_err	 [weight=1.0];
	pid -> pid_SETUP	 [weight=1.0];
	pid -> pid_SOF	 [weight=1.0];
	pid -> pid_OUT	 [weight=1.0];
	pid -> pid_RES	 [weight=1.0];
	pid -> pid_IN	 [weight=1.0];
	pid -> pid_NYET	 [weight=1.0];
	pid -> pid_ERR	 [weight=1.0];
	"u0.din" -> "u0.crc_out"	 [weight=27.0];
	data_valid_d -> d2	 [weight=1.0];
	data_valid_d -> d0	 [weight=1.0];
	data_valid_d -> d1	 [weight=1.0];
	data_valid_d -> rxv1	 [weight=2.0];
	data_valid_d -> rxv2	 [weight=2.0];
	data_valid_d -> data_valid0	 [weight=1.0];
	data_valid_d -> crc16_sum	 [weight=1.0];
	pid_IN -> pid_TOKEN	 [weight=1.0];
	token_le_2 -> token1	 [weight=1.0];
	token_le_2 -> token_valid_r1	 [weight=1.0];
	crc5_out2 -> crc5_err	 [weight=1.0];
	token_endp -> "u0.din"	 [weight=1.0];
	pid_ld_en -> pid	 [weight=1.0];
	rx_valid -> next_state	 [weight=9.0];
	rx_valid -> token_le_1	 [weight=1.0];
	rx_valid -> data_valid_d	 [weight=3.0];
	rx_valid -> token_le_2	 [weight=1.0];
	rx_valid -> seq_err	 [weight=4.0];
	rx_valid -> pid_ld_en	 [weight=1.0];
	"u1.din" -> "u1.crc_out"	 [weight=31.0];
}
